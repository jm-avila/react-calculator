{"version":3,"sources":["App.js","index.js"],"names":["App","useState","previousOperand","setPreviousOperand","currentOperand","setCurrentOperand","operation","setOperation","compute","computation","prev","parseFloat","current","isNaN","toString","getDisplayNumber","number","integerDisplay","stringNumber","integerDigits","split","decimalDigits","toLocaleString","maximumFractionDigits","numberInput","innerText","currentTarget","includes","prevState","operationInput","chooseOperation","className","onClick","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLA2HeA,MAxHf,WAAgB,IAAD,EACiCC,mBAAS,IAD1C,mBACNC,EADM,KACWC,EADX,OAE+BF,mBAAS,IAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGqBJ,qBAHrB,mBAGNK,EAHM,KAGKC,EAHL,KA6Bb,SAASC,IACP,IAAIC,EACEC,EAAOC,WAAWT,GAClBU,EAAUD,WAAWP,GAC3B,IAAIS,MAAMH,KAASG,MAAMD,GAAzB,CACA,OAAQN,GACN,IAAK,IACHG,EAAcC,EAAOE,EACrB,MACF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MACF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MACF,IAAK,IACHH,EAAcC,EAAOE,EACrB,MACF,QACE,OAEJP,EAAkBI,EAAYK,YAC9BP,IACAJ,EAAmB,KAGrB,SAASY,EAAiBC,GACxB,IAGIC,EAHEC,EAAeF,EAAOF,WACtBK,EAAgBR,WAAWO,EAAaE,MAAM,KAAK,IACnDC,EAAgBH,EAAaE,MAAM,KAAK,GAS9C,OANEH,EADEJ,MAAMM,GACS,GAEAA,EAAcG,eAAe,KAAM,CAClDC,sBAAuB,IAGN,MAAjBF,EACI,GAAN,OAAUJ,EAAV,YAA4BI,GAErBJ,EAIX,SAASO,EAAT,GAAwD,IA5DlCR,EA4DkBS,EAAe,EAAhCC,cAAiBD,UA3DvB,OADKT,EA6DPS,IA5DSrB,EAAeuB,SAAS,MAC9CtB,GAAkB,SAACuB,GAAD,OAAeA,EAAUd,WAAaE,EAAOF,cA8DjE,SAASe,EAAT,IA3DA,SAAyBvB,GACA,KAAnBF,IACoB,KAApBF,GACFM,IAEFD,EAAaD,GACbH,EAAmBC,GACnBC,EAAkB,KAqDlByB,CADwD,EAAhCJ,cAAiBD,WAI3C,OACE,yBAAKM,UAAU,kBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,oBACZhB,EAAiBb,GADpB,IACuCI,GAEvC,yBAAKyB,UAAU,mBACZhB,EAAiBX,KAGtB,4BAAQ2B,UAAU,WAAWC,QAxFnC,WACE7B,EAAmB,IACnBE,EAAkB,MAsFd,MAGA,4BAAQ2B,QAtFd,WACE3B,GAAkB,SAACuB,GAAD,OAAeA,EAAUd,WAAWmB,MAAM,GAAI,QAqF5D,OACA,4BAAQD,QAASH,GAAjB,KACA,4BAAQG,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASH,GAAjB,KACA,4BAAQG,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASH,GAAjB,KACA,4BAAQG,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQQ,QAASH,GAAjB,KACA,4BAAQG,QAASR,GAAjB,KACA,4BAAQQ,QAASR,GAAjB,KACA,4BAAQO,UAAU,WAAWC,QAASxB,GAAtC,QC/GR0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.cd6351b3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [previousOperand, setPreviousOperand] = useState(\"\");\n  const [currentOperand, setCurrentOperand] = useState(\"\");\n  const [operation, setOperation] = useState();\n\n  function allClear() {\n    setPreviousOperand(\"\");\n    setCurrentOperand(\"\");\n  }\n\n  function del() {\n    setCurrentOperand((prevState) => prevState.toString().slice(0, -1));\n  }\n\n  function appendNumber(number) {\n    if (number === \".\" && currentOperand.includes(\".\")) return;\n    setCurrentOperand((prevState) => prevState.toString() + number.toString());\n  }\n\n  function chooseOperation(operation) {\n    if (currentOperand === \"\") return;\n    if (previousOperand !== \"\") {\n      compute();\n    }\n    setOperation(operation);\n    setPreviousOperand(currentOperand);\n    setCurrentOperand(\"\");\n  }\n\n  function compute() {\n    let computation;\n    const prev = parseFloat(previousOperand);\n    const current = parseFloat(currentOperand);\n    if (isNaN(prev) || isNaN(current)) return;\n    switch (operation) {\n      case \"+\":\n        computation = prev + current;\n        break;\n      case \"-\":\n        computation = prev - current;\n        break;\n      case \"*\":\n        computation = prev * current;\n        break;\n      case \"/\":\n        computation = prev / current;\n        break;\n      default:\n        return;\n    }\n    setCurrentOperand(computation.toString());\n    setOperation();\n    setPreviousOperand(\"\");\n  }\n\n  function getDisplayNumber(number) {\n    const stringNumber = number.toString();\n    const integerDigits = parseFloat(stringNumber.split(\".\")[0]);\n    const decimalDigits = stringNumber.split(\".\")[1];\n    let integerDisplay;\n    if (isNaN(integerDigits)) {\n      integerDisplay = \"\";\n    } else {\n      integerDisplay = integerDigits.toLocaleString(\"en\", {\n        maximumFractionDigits: 0,\n      });\n    }\n    if (decimalDigits != null) {\n      return `${integerDisplay}.${decimalDigits}`;\n    } else {\n      return integerDisplay;\n    }\n  }\n\n  function numberInput({ currentTarget: { innerText } }) {\n    appendNumber(innerText);\n  }\n\n  function operationInput({ currentTarget: { innerText } }) {\n    chooseOperation(innerText);\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"grid\">\n        <div className=\"output\">\n          <div className=\"previous-operand\">\n            {getDisplayNumber(previousOperand)} {operation}\n          </div>\n          <div className=\"current-operand\">\n            {getDisplayNumber(currentOperand)}\n          </div>\n        </div>\n        <button className=\"span-two\" onClick={allClear}>\n          AC\n        </button>\n        <button onClick={del}>DEL</button>\n        <button onClick={operationInput}>/</button>\n        <button onClick={numberInput}>1</button>\n        <button onClick={numberInput}>2</button>\n        <button onClick={numberInput}>3</button>\n        <button onClick={operationInput}>*</button>\n        <button onClick={numberInput}>4</button>\n        <button onClick={numberInput}>5</button>\n        <button onClick={numberInput}>6</button>\n        <button onClick={operationInput}>+</button>\n        <button onClick={numberInput}>7</button>\n        <button onClick={numberInput}>8</button>\n        <button onClick={numberInput}>9</button>\n        <button onClick={operationInput}>-</button>\n        <button onClick={numberInput}>.</button>\n        <button onClick={numberInput}>0</button>\n        <button className=\"span-two\" onClick={compute}>\n          =\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}